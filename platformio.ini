; PlatformIO Project Configuration File2
; http:;docs.platformio.org/page/projectconf.html

[platformio]
include_dir = inc

env_default = genericSTM32F103RC
;env_default = hoverboard
;env_default = control_softwareserial
;env_default = control_usart2
;env_default = control_usart3


[env:genericSTM32F103RC]
; Default environment, uses settings as specified in config.h
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T./STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
#    -Wl,-lnosys

[env:hoverboard]
; this control type allows the board to be used AS a hoverboard,
; responding to sensor movements when in hoverboard mode.
;/ and uses softwareserial for serial control on B2/C9
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T./STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Og
#    -Wl,-lnosys
    -D IGNORE_GLOBAL_CONFIG

    -D READ_SENSOR
    -D CONTROL_SENSOR
    -D SOFTWARE_SERIAL
    -D SOFTWARE_SERIAL_RX_PIN=GPIO_PIN_2
    -D SOFTWARE_SERIAL_RX_PORT=GPIOB
    -D SOFTWARE_SERIAL_TX_PIN=GPIO_PIN_9
    -D SOFTWARE_SERIAL_TX_PORT=GPIOC
    -D DEBUG_SOFTWARE_SERIAL
    -D FLASH_DEFAULT_HOVERBOARD_ENABLE=1
    -D SERIAL_USART2_IT
    -D SERIAL_USART3_IT
    -D USART2_BAUD=52177        ; control via usart from GD32 based sensor boards @52177 baud
    -D USART3_BAUD=52177        ; control via usart from GD32 based sensor boards @52177 baud
    -D SERIAL_USART_IT_BUFFERTYPE='unsigned short'
    -D USART2_WORDLENGTH=UART_WORDLENGTH_9B
    -D USART3_WORDLENGTH=UART_WORDLENGTH_9B

    -D PWM_FREQ=16000              ; PWM frequency in Hz
    -D DEAD_TIME=32                ; PWM deadtime
    -D DELAY_IN_MAIN_LOOP=5        ; in ms. default 5. it is independent of all the timing critical stuff. do not touch if you do not know what you are doing.
    -D TIMEOUT=5                   ; number of wrong / missing input commands before emergency off
    -D BAT_CALIB_REAL_VOLTAGE=43.0       ; input voltage measured by multimeter
    -D BAT_CALIB_ADC=1704                ; adc-value measured by mainboard (value nr 4 on UART debug output)
    -D BAT_NUMBER_OF_CELLS=10            ; normal Hoverboard battery: 10s
    -D BAT_LOW_LVL1_ENABLE=0             ; to beep or not to beep, 1 or 0
    -D BAT_LOW_LVL1=3.6                  ; gently beeps at this voltage level. [V/cell]
    -D BAT_LOW_LVL2_ENABLE=1             ; to beep or not to beep, 1 or 0
    -D BAT_LOW_LVL2=3.5                  ; your battery is almost empty. Charge now! [V/cell]
    -D BAT_LOW_DEAD=3.37                 ; undervoltage poweroff. (while not driving) [V/cell]
    -D DC_CUR_LIMIT=15                   ; DC current limit in amps per motor. so 15 means it will draw 30A out of your battery. it does not disable motors, it is a soft current limit.
    -D TEMP_CAL_LOW_ADC=1655             ; temperature 1: ADC value
    -D TEMP_CAL_LOW_DEG_C=35.8           ; temperature 1: measured temperature [°C]
    -D TEMP_CAL_HIGH_ADC=1588            ; temperature 2: ADC value
    -D TEMP_CAL_HIGH_DEG_C=48.9          ; temperature 2: measured temperature [°C]
    -D TEMP_WARNING_ENABLE=0             ; to beep or not to beep, 1 or 0, DO NOT ACTIVITE WITHOUT CALIBRATION!
    -D TEMP_WARNING=60                   ; annoying fast beeps [°C]
    -D TEMP_POWEROFF_ENABLE=0            ; to poweroff or not to poweroff, 1 or 0, DO NOT ACTIVITE WITHOUT CALIBRATION!
    -D TEMP_POWEROFF=65                  ; overheat poweroff. (while not driving) [°C]
    -D INACTIVITY_TIMEOUT=8              ; minutes of not driving until poweroff. it is not very precise.
    -D FLASH_STORAGE
    -D HALL_INTERRUPTS
    -D SOFTWARE_SERIAL_BAUD=9600
    -D NO_PROTOCOL=0
    -D INCLUDE_PROTOCOL2=2       ; enables processing of input characters through 'machine_protocol.c'
    -D INCLUDE_PROTOCOL=INCLUDE_PROTOCOL2
    -D FILTER=0.1                ; lower value == softer filter. do not use values <0.01, you will get float precision issues.
    -D SPEED_COEFFICIENT=0.5     ; higher value == stronger. 0.0 to ~2.0?
    -D STEER_COEFFICIENT=0.5     ; higher value == stronger. if you do not want any steering, set it to 0.0; 0.0 to 1.0
    -D INVERT_R_DIRECTION
    -D INVERT_L_DIRECTION
    -D BEEPS_BACKWARD=0          ; 0 or 1



[env:control_softwareserial]
; hoverboard sensor functionality is disabled
; and uses softwareserial for serial control on A2/A3 -
; which are actually USART pins!
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T./STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Og
#    -Wl,-lnosys
    -D IGNORE_GLOBAL_CONFIG

    -D SOFTWARE_SERIAL
    -D SOFTWARE_SERIAL_RX_PIN=GPIO_PIN_2    ; PB10/USART3_TX Pin29      PA2/USART2_TX/ADC123_IN2  Pin16
    -D SOFTWARE_SERIAL_RX_PORT=GPIOA
    -D SOFTWARE_SERIAL_TX_PIN=GPIO_PIN_3    ; PB11/USART3_RX Pin30      PA3/USART2_RX/ADC123_IN3  Pin17
    -D SOFTWARE_SERIAL_TX_PORT=GPIOA
    -D USART2_BAUD=115200                         ; UART baud rate
    -D USART2_WORDLENGTH=UART_WORDLENGTH_8B       ; UART_WORDLENGTH_8B or UART_WORDLENGTH_9B
    -D USART3_BAUD=115200                         ; UART baud rate
    -D USART3_WORDLENGTH=UART_WORDLENGTH_8B       ; UART_WORDLENGTH_8B or UART_WORDLENGTH_9B
    -D SERIAL_USART_IT_BUFFERTYPE='unsigned char' ; char or short

    -D PWM_FREQ=16000              ; PWM frequency in Hz
    -D DEAD_TIME=32                ; PWM deadtime
    -D DELAY_IN_MAIN_LOOP=5        ; in ms. default 5. it is independent of all the timing critical stuff. do not touch if you do not know what you are doing.
    -D TIMEOUT=5                   ; number of wrong / missing input commands before emergency off
    -D BAT_CALIB_REAL_VOLTAGE=43.0       ; input voltage measured by multimeter
    -D BAT_CALIB_ADC=1704                ; adc-value measured by mainboard (value nr 4 on UART debug output)
    -D BAT_NUMBER_OF_CELLS=10            ; normal Hoverboard battery: 10s
    -D BAT_LOW_LVL1_ENABLE=0             ; to beep or not to beep, 1 or 0
    -D BAT_LOW_LVL1=3.6                  ; gently beeps at this voltage level. [V/cell]
    -D BAT_LOW_LVL2_ENABLE=1             ; to beep or not to beep, 1 or 0
    -D BAT_LOW_LVL2=3.5                  ; your battery is almost empty. Charge now! [V/cell]
    -D BAT_LOW_DEAD=3.37                 ; undervoltage poweroff. (while not driving) [V/cell]
    -D DC_CUR_LIMIT=15                   ; DC current limit in amps per motor. so 15 means it will draw 30A out of your battery. it does not disable motors, it is a soft current limit.
    -D TEMP_CAL_LOW_ADC=1655             ; temperature 1: ADC value
    -D TEMP_CAL_LOW_DEG_C=35.8           ; temperature 1: measured temperature [°C]
    -D TEMP_CAL_HIGH_ADC=1588            ; temperature 2: ADC value
    -D TEMP_CAL_HIGH_DEG_C=48.9          ; temperature 2: measured temperature [°C]
    -D TEMP_WARNING_ENABLE=0             ; to beep or not to beep, 1 or 0, DO NOT ACTIVITE WITHOUT CALIBRATION!
    -D TEMP_WARNING=60                   ; annoying fast beeps [°C]
    -D TEMP_POWEROFF_ENABLE=0            ; to poweroff or not to poweroff, 1 or 0, DO NOT ACTIVITE WITHOUT CALIBRATION!
    -D TEMP_POWEROFF=65                  ; overheat poweroff. (while not driving) [°C]
    -D INACTIVITY_TIMEOUT=8              ; minutes of not driving until poweroff. it is not very precise.
    -D FLASH_STORAGE
    -D HALL_INTERRUPTS
    -D SOFTWARE_SERIAL_BAUD=9600
    -D NO_PROTOCOL=0
    -D INCLUDE_PROTOCOL2=2       ; enables processing of input characters through 'machine_protocol.c'
    -D INCLUDE_PROTOCOL=INCLUDE_PROTOCOL2
    -D FILTER=0.1                ; lower value == softer filter. do not use values <0.01, you will get float precision issues.
    -D SPEED_COEFFICIENT=0.5     ; higher value == stronger. 0.0 to ~2.0?
    -D STEER_COEFFICIENT=0.5     ; higher value == stronger. if you do not want any steering, set it to 0.0; 0.0 to 1.0
    -D INVERT_R_DIRECTION
    -D INVERT_L_DIRECTION
    -D BEEPS_BACKWARD=0          ; 0 or 1


[env:control_usart2]
; hoverboard sensor functionality is disabled
; and control is via USART2
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T./STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Og
#    -Wl,-lnosys
    -D IGNORE_GLOBAL_CONFIG

    -D SERIAL_USART2_IT
    -D USART2_BAUD=115200                         ; UART baud rate
    -D USART2_WORDLENGTH=UART_WORDLENGTH_8B       ; UART_WORDLENGTH_8B or UART_WORDLENGTH_9B
    -D USART3_BAUD=115200                         ; UART baud rate
    -D USART3_WORDLENGTH=UART_WORDLENGTH_8B       ; UART_WORDLENGTH_8B or UART_WORDLENGTH_9B
    -D SERIAL_USART_IT_BUFFERTYPE='unsigned char' ; char or short

    -D PWM_FREQ=16000              ; PWM frequency in Hz
    -D DEAD_TIME=32                ; PWM deadtime
    -D DELAY_IN_MAIN_LOOP=5        ; in ms. default 5. it is independent of all the timing critical stuff. do not touch if you do not know what you are doing.
    -D TIMEOUT=5                   ; number of wrong / missing input commands before emergency off
    -D BAT_CALIB_REAL_VOLTAGE=43.0       ; input voltage measured by multimeter
    -D BAT_CALIB_ADC=1704                ; adc-value measured by mainboard (value nr 4 on UART debug output)
    -D BAT_NUMBER_OF_CELLS=10            ; normal Hoverboard battery: 10s
    -D BAT_LOW_LVL1_ENABLE=0             ; to beep or not to beep, 1 or 0
    -D BAT_LOW_LVL1=3.6                  ; gently beeps at this voltage level. [V/cell]
    -D BAT_LOW_LVL2_ENABLE=1             ; to beep or not to beep, 1 or 0
    -D BAT_LOW_LVL2=3.5                  ; your battery is almost empty. Charge now! [V/cell]
    -D BAT_LOW_DEAD=3.37                 ; undervoltage poweroff. (while not driving) [V/cell]
    -D DC_CUR_LIMIT=15                   ; DC current limit in amps per motor. so 15 means it will draw 30A out of your battery. it does not disable motors, it is a soft current limit.
    -D TEMP_CAL_LOW_ADC=1655             ; temperature 1: ADC value
    -D TEMP_CAL_LOW_DEG_C=35.8           ; temperature 1: measured temperature [°C]
    -D TEMP_CAL_HIGH_ADC=1588            ; temperature 2: ADC value
    -D TEMP_CAL_HIGH_DEG_C=48.9          ; temperature 2: measured temperature [°C]
    -D TEMP_WARNING_ENABLE=0             ; to beep or not to beep, 1 or 0, DO NOT ACTIVITE WITHOUT CALIBRATION!
    -D TEMP_WARNING=60                   ; annoying fast beeps [°C]
    -D TEMP_POWEROFF_ENABLE=0            ; to poweroff or not to poweroff, 1 or 0, DO NOT ACTIVITE WITHOUT CALIBRATION!
    -D TEMP_POWEROFF=65                  ; overheat poweroff. (while not driving) [°C]
    -D INACTIVITY_TIMEOUT=8              ; minutes of not driving until poweroff. it is not very precise.
    -D FLASH_STORAGE
    -D HALL_INTERRUPTS
    -D SOFTWARE_SERIAL_BAUD=9600
    -D NO_PROTOCOL=0
    -D INCLUDE_PROTOCOL2=2       ; enables processing of input characters through 'machine_protocol.c'
    -D INCLUDE_PROTOCOL=INCLUDE_PROTOCOL2
    -D FILTER=0.1                ; lower value == softer filter. do not use values <0.01, you will get float precision issues.
    -D SPEED_COEFFICIENT=0.5     ; higher value == stronger. 0.0 to ~2.0?
    -D STEER_COEFFICIENT=0.5     ; higher value == stronger. if you do not want any steering, set it to 0.0; 0.0 to 1.0
    -D INVERT_R_DIRECTION
    -D INVERT_L_DIRECTION
    -D BEEPS_BACKWARD=0          ; 0 or 1


[env:control_usart3]
; hoverboard sensor functionality is disabled
; and control is via USART3
platform = ststm32
framework = stm32cube
debug_tool = stlink
board = genericSTM32F103RC

build_flags =
    -I${PROJECT_DIR}/inc/
    -I${PROJECT_DIR}/src/hbprotocol/
    -DUSE_HAL_DRIVER
    -DSTM32F103xE
    -Wl,-T./STM32F103RCTx_FLASH.ld
    -Wl,-lc
    -Wl,-lm
    -Og
#    -Wl,-lnosys
    -D IGNORE_GLOBAL_CONFIG

    -D SERIAL_USART3_IT
    -D USART2_BAUD=115200                         ; UART baud rate
    -D USART2_WORDLENGTH=UART_WORDLENGTH_8B       ; UART_WORDLENGTH_8B or UART_WORDLENGTH_9B
    -D USART3_BAUD=115200                         ; UART baud rate
    -D USART3_WORDLENGTH=UART_WORDLENGTH_8B       ; UART_WORDLENGTH_8B or UART_WORDLENGTH_9B
    -D SERIAL_USART_IT_BUFFERTYPE='unsigned char' ; char or short

; ############################### DO-NOT-TOUCH SETTINGS ###############################
    -D PWM_FREQ=16000              ; PWM frequency in Hz
    -D DEAD_TIME=32                ; PWM deadtime
    -D DELAY_IN_MAIN_LOOP=5        ; in ms. default 5. it is independent of all the timing critical stuff. do not touch if you do not know what you are doing.
    -D TIMEOUT=5                   ; number of wrong / missing input commands before emergency off
    -D BAT_CALIB_REAL_VOLTAGE=43.0       ; input voltage measured by multimeter
    -D BAT_CALIB_ADC=1704                ; adc-value measured by mainboard (value nr 4 on UART debug output)
    -D BAT_NUMBER_OF_CELLS=10            ; normal Hoverboard battery: 10s
    -D BAT_LOW_LVL1_ENABLE=0             ; to beep or not to beep, 1 or 0
    -D BAT_LOW_LVL1=3.6                  ; gently beeps at this voltage level. [V/cell]
    -D BAT_LOW_LVL2_ENABLE=1             ; to beep or not to beep, 1 or 0
    -D BAT_LOW_LVL2=3.5                  ; your battery is almost empty. Charge now! [V/cell]
    -D BAT_LOW_DEAD=3.37                 ; undervoltage poweroff. (while not driving) [V/cell]
    -D DC_CUR_LIMIT=15                   ; DC current limit in amps per motor. so 15 means it will draw 30A out of your battery. it does not disable motors, it is a soft current limit.
    -D TEMP_CAL_LOW_ADC=1655             ; temperature 1: ADC value
    -D TEMP_CAL_LOW_DEG_C=35.8           ; temperature 1: measured temperature [°C]
    -D TEMP_CAL_HIGH_ADC=1588            ; temperature 2: ADC value
    -D TEMP_CAL_HIGH_DEG_C=48.9          ; temperature 2: measured temperature [°C]
    -D TEMP_WARNING_ENABLE=0             ; to beep or not to beep, 1 or 0, DO NOT ACTIVITE WITHOUT CALIBRATION!
    -D TEMP_WARNING=60                   ; annoying fast beeps [°C]
    -D TEMP_POWEROFF_ENABLE=0            ; to poweroff or not to poweroff, 1 or 0, DO NOT ACTIVITE WITHOUT CALIBRATION!
    -D TEMP_POWEROFF=65                  ; overheat poweroff. (while not driving) [°C]
    -D INACTIVITY_TIMEOUT=8              ; minutes of not driving until poweroff. it is not very precise.
    -D FLASH_STORAGE
    -D HALL_INTERRUPTS
    -D SOFTWARE_SERIAL_BAUD=9600
    -D NO_PROTOCOL=0
    -D INCLUDE_PROTOCOL2=2       ; enables processing of input characters through 'machine_protocol.c'
    -D INCLUDE_PROTOCOL=INCLUDE_PROTOCOL2
    -D FILTER=0.1                ; lower value == softer filter. do not use values <0.01, you will get float precision issues.
    -D SPEED_COEFFICIENT=0.5     ; higher value == stronger. 0.0 to ~2.0?
    -D STEER_COEFFICIENT=0.5     ; higher value == stronger. if you do not want any steering, set it to 0.0; 0.0 to 1.0
    -D INVERT_R_DIRECTION
    -D INVERT_L_DIRECTION
    -D BEEPS_BACKWARD=0          ; 0 or 1